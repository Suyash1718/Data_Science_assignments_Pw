1. Write a code to reverse a string

Edit
s = "hello"
reversed_s = s[::-1]
print(reversed_s)

2. Write a code to count the number of vowels in a string

s = "hello world"
vowels = "aeiouAEIOU"
count = sum(1 for ch in s if ch in vowels)
print(count)

3. Write a code to check if a given string is a palindrome or not

s = "madam"
print(s == s[::-1])

4. Write a code to check if two given strings are anagrams of each other

s1 = "listen"
s2 = "silent"
print(sorted(s1) == sorted(s2))

5. Write a code to find all occurrences of a given substring within another string

text = "banana"
sub = "ana"
positions = [i for i in range(len(text)) if text.startswith(sub, i)]
print(positions)

6. Write a code to perform basic string compression using the counts of repeated characters

s = "aaabbc"
compressed = ""
i = 0
while i < len(s):
    count = 1
    while i + 1 < len(s) and s[i] == s[i+1]:
        i += 1
        count += 1
    compressed += s[i] + str(count)
    i += 1
print(compressed)

7. Write a code to determine if a string has all unique characters

s = "abcde"
print(len(set(s)) == len(s))

8. Write a code to convert a given string to uppercase or lowercase

s = "Hello World"
print(s.upper())
print(s.lower())

9. Write a code to count the number of words in a string

s = "Hello world from Python"
words = s.split()
print(len(words))

10. Write a code to concatenate two strings without using the + operator

s1 = "Hello"
s2 = "World"
result = "{}{}".format(s1, s2)
print(result)

11. Write a code to remove all occurrences of a specific element from a list

lst = [1, 2, 3, 2, 4]
element = 2
new_lst = [x for x in lst if x != element]
print(new_lst)

12. Implement a code to find the second largest number in a given list of integers

lst = [10, 20, 4, 45, 99]
unique = list(set(lst))
unique.sort()
print(unique[-2])

13. Create a code to count the occurrences of each element in a list and return a dictionary

lst = [1, 2, 2, 3, 1]
counts = {}
for x in lst:
    counts[x] = counts.get(x, 0) + 1
print(counts)

14. Write a code to reverse a list in-place without using any built-in reverse functions

lst = [1, 2, 3, 4]
for i in range(len(lst)//2):
    lst[i], lst[-i-1] = lst[-i-1], lst[i]
print(lst)

15. Implement a code to find and remove duplicates from a list while preserving the original order

lst = [1, 2, 2, 3, 1]
seen = set()
result = []
for x in lst:
    if x not in seen:
        seen.add(x)
        result.append(x)
print(result)

16. Create a code to check if a given list is sorted (ascending or descending)

lst = [1, 2, 3, 4]
asc = lst == sorted(lst)
desc = lst == sorted(lst, reverse=True)
print(asc or desc)

17. Write a code to merge two sorted lists into a single sorted list

a = [1, 3, 5]
b = [2, 4, 6]
merged = sorted(a + b)
print(merged)

18. Implement a code to find the intersection of two given lists

a = [1, 2, 3]
b = [2, 3, 4]
print(list(set(a) & set(b)))

19. Create a code to find the union of two lists without duplicates

a = [1, 2, 3]
b = [3, 4, 5]
print(list(set(a + b)))

20. Write a code to shuffle a given list randomly without using any built-in shuffle functions

import random
lst = [1, 2, 3, 4, 5]
shuffled = []
temp = lst[:]
while temp:
    i = random.randrange(len(temp))
    shuffled.append(temp.pop(i))
print(shuffled)

21. Write a code that takes two tuples and returns common elements

t1 = (1, 2, 3)
t2 = (2, 3, 4)
print(tuple(set(t1) & set(t2)))

22. Prompt the user to enter two sets of integers, print their intersection

a = set(map(int, input("Enter set 1: ").split(',')))
b = set(map(int, input("Enter set 2: ").split(',')))
print(a & b)

23. Concatenate two tuples and return the result

t1 = (1, 2)
t2 = (3, 4)
print(t1 + t2)

24. Print elements present in first set but not in second set

a = set(input("Enter set 1: ").split())
b = set(input("Enter set 2: ").split())
print(a - b)

25. Return elements from tuple within a given index range

t = (0, 1, 2, 3, 4, 5)
start = 1
end = 4
print(t[start:end+1])

26. Print union of two sets of characters

a = set(input("Enter chars for set 1: "))
b = set(input("Enter chars for set 2: "))
print(a | b)

27. Return max and min values from tuple using tuple unpacking

t = (4, 1, 9, 6)
max_val, min_val = max(t), min(t)
print("Max:", max_val, "Min:", min_val)

28. Print union, intersection, and difference of two sets
a = {1, 2, 3}
b = {2, 3, 4}
print("Union:", a | b)
print("Intersection:", a & b)
print("Difference:", a - b)

29. Count occurrences of an element in a tuple

t = (1, 2, 2, 3)
elem = 2
print(t.count(elem))


30. Print symmetric difference of two sets of strings

a = set(input("Enter set 1: ").split())
b = set(input("Enter set 2: ").split())
print(a ^ b)

31. Return a dictionary with word frequencies from a list of words

words = ["apple", "banana", "apple"]
freq = {}
for word in words:
    freq[word] = freq.get(word, 0) + 1
print(freq)

32. Merge two dictionaries, adding values for common keys

d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
merged = d1.copy()
for k, v in d2.items():
    merged[k] = merged.get(k, 0) + v
print(merged)

33. Access a value in nested dictionary using a list of keys

def get_nested_value(d, keys):
    for k in keys:
        if isinstance(d, dict) and k in d:
            d = d[k]
        else:
            return None
    return d

nested_dict = {'a': {'b': {'c': 5}}}
keys = ['a', 'b', 'c']
print(get_nested_value(nested_dict, keys))


34. Return a sorted version of dictionary based on values

d = {'a': 3, 'b': 1, 'c': 2}
sorted_dict = dict(sorted(d.items(), key=lambda x: x[1]))
print(sorted_dict)

35. Invert a dictionary: values become keys and keys become list of values

d = {'a': 1, 'b': 2, 'c': 1}
inverted = {}
for k, v in d.items():
    inverted.setdefault(v, []).append(k)
print(inverted)